# render.yaml
# Define la versión del blueprint de Render
services:
# ====================================================================
# 1. Base de Datos Gestionada (CORREGIDO: type: database)
# ====================================================================
  - type: database 
    name: topicos-db
    plan: standard # Puedes cambiar a 'starter' para el plan gratuito
    databaseName: topicos_db
    # Opcional: Especifica la versión de PostgreSQL si es necesario
    # serviceDetails:
    #   database:
    #     version: "15"

# ====================================================================
# 2. Caché Redis Gestionado (CORREGIDO: type: redis)
# ====================================================================
  - type: redis
    name: topicos-redis
    plan: starter # Plan gratuito/básico
    # Los campos 'port' y 'env' no son necesarios para los servicios gestionados (database/redis)

# ====================================================================
# 3. Microservicio de Inscripciones ('app' en el compose)
# (CORREGIDO: 'port' y 'envVars' son campos válidos para type: pserv)
# ====================================================================
  - type: pserv
    name: inscripciones
    # Indicamos a Render que construya la imagen desde el Dockerfile en /inscripciones
    dockerContext: ./inscripciones 
    # Comando para iniciar la aplicación (similar a 'command' del compose)
    startCommand: npm run dev:reset
    env: node
    # Exponemos el puerto interno del contenedor
    port: 3001
    # Variables de Entorno
    envVars:
      # Apunta a los servicios gestionados usando la sintaxis de Render Blueprint
      - key: DB_HOST
        value: ${topicos-db.host}
      - key: DB_USER
        value: ${topicos-db.user}
      - key: DB_PASSWORD
        value: ${topicos-db.password}
      - key: DB_NAME
        value: topicos_db
      - key: DB_PORT
        value: 5432
      - key: REDIS_HOST
        value: ${topicos-redis.host}
      - key: REDIS_PORT
        value: ${topicos-redis.port}
      - key: PORT
        value: 3001

# ====================================================================
# 4. Microservicio de Login ('login' en el compose)
# (CORREGIDO: 'port' y 'envVars' son campos válidos para type: pserv)
# ====================================================================
  - type: pserv
    name: login-service
    dockerContext: ./login
    startCommand: npm run dev
    env: node
    port: 3002
    envVars:
      - key: JWT_SECRET
        value: clave_super_secreta 
      - key: DB_HOST
        value: ${topicos-db.host}
      - key: DB_USER
        value: ${topicos-db.user}
      - key: DB_PASSWORD
        value: ${topicos-db.password}
      - key: PORT
        value: 3002

# ====================================================================
# 5. API Gateway ('gateway' en el compose)
# (type: web para acceso público)
# ====================================================================
  - type: web 
    name: api-gateway
    dockerContext: ./gateway
    startCommand: npm run dev
    env: node
    port: 3000
    pullRequest:
      autoDeploy: true
    envVars:
      - key: PORT
        value: 3000
      # URLs internas usan el nombre del servicio de Render
      - key: INSCRIPCIONES_URL
        value: http://inscripciones:3001
      - key: LOGIN_URL
        value: http://login-service:3002
      - key: JWT_SECRET
        value: clave_super_secreta

# ====================================================================
# 6. Frontend ('mi_frontend' en el compose)
# (type: web porque usa un Dockerfile con Nginx)
# ====================================================================
  - type: web
    name: mi-frontend
    dockerContext: ./mi_frontend/
    port: 80 
    dependsOn:
      - api-gateway
    envVars:
      - key: VITE_API_BASE_URL
        value: ${api-gateway.url}